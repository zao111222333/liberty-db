// cargo bench --package dev --bench benchmark --features bench
#[cfg(target_os = "linux")]
use dev::_impl_bench::OpenTimerLibrary;
use dev::{gen_projs, run_bench};
use std::{
  fs::File,
  io::{BufWriter, Write},
};
fn main() {
  #[cfg(target_os = "linux")]
  let projs = gen_projs![
    (LibertyDb, liberty_db_latest::Library<liberty_db_latest::DefaultCtx>),
    // (Si2drLiberty, Si2drLibertyLibrary),
    (OPenTimer, OpenTimerLibrary),
    (LibertyIo, liberty_io::Group),
    (LibertyParse, libertyparse::Liberty),
    (Liberty2json, liberty2json::Liberty),
  ];
  #[cfg(not(target_os = "linux"))]
  let projs = gen_projs![
    (LibertyDb, liberty_db_latest::Library<liberty_db_latest::DefaultCtx>),
    (LibertyIo, liberty_io::Group),
    (LibertyParse, libertyparse::Liberty),
    (Liberty2json, liberty2json::Liberty),
  ];
  let projs_table = run_bench(projs, false);
  let regress_table = run_bench(
    gen_projs![
      (LibertyDbLatest, liberty_db_latest::Library<liberty_db_latest::DefaultCtx>),
      (LibertyDb0p9p, liberty_db_0p9p0::Library<liberty_db_0p9p0::DefaultCtx>),
      (LibertyDb0p8p, liberty_db_0p8p3::Library<liberty_db_0p8p3::DefaultCtx>),
      (LibertyDb0p7p, liberty_db_0p7p4::Library),
      (LibertyDb0p6p, liberty_db_0p6p14::Library),
      // (LibertyDb0p6p2, liberty_db_0p6p2::Library),
      // (LibertyDb0p6p1, liberty_db_0p6p1::Library),
      // (LibertyDb0p6p0, liberty_db_0p6p0::Library),
      (LibertyDb0p5, liberty_db_0p5p9::Library),
      (LibertyDb0p4, liberty_db_0p4p13::Library),
      (LibertyDb0p3, liberty_db_0p3p1::library::Library),
    ],
    true,
  );

  let out_file = File::create("../target/criterion/index.html").unwrap();
  let mut writer = BufWriter::new(out_file);
  let ccs_text = "body {font: 14px Helvetica Neue;text-rendering: optimizelegibility;}.body {width: 960px;margin: auto;}th {font-weight: 200}th,td {padding-right: 3px;padding-bottom: 3px;}a:link {color: #1F78B4;text-decoration: none;}th.ci-bound {opacity: 0.6}td.ci-bound {opacity: 0.5}.stats {width: 80%;margin: auto;display: flex;}.additional_stats {flex: 0 0 60%}.additional_plots {flex: 1}h2 {font-size: 36px;font-weight: 300;}h3 {font-size: 24px;font-weight: 300;}#footer {height: 40px;background: #888;color: white;font-size: larger;font-weight: 300;}#footer a {color: white;text-decoration: underline;}#footer p {text-align: center}.info-table table, .info-table th, .info-table td {border: 1px solid black;border-collapse: collapse;padding-left: 5px;padding-right: 5px;}";
  let cpu_info = format!(
    "{} # {}Core",
    sysinfo::System::new_all().cpus()[0].brand(),
    sysinfo::System::new_all().cpus().len()
  );
  let date_info = chrono::offset::Utc::now().to_rfc2822();
  _ = write!(
    writer,
    r#"<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>Benchmark Summary</title>
<style type="text/css">
{ccs_text}
</style>
</head>
<body><div class="body"><h2>Benchmark Summary</h2>
<p>Platform: {cpu_info}</p>
<p>{date_info}</p>
<div class="absolute">
<h2>Project Comparison Benchmark</h2>
{projs_table}
<h2>Self Regression</h2>
{regress_table}
</div><div id="footer"><p>This report was generated by <a href="https://github.com/bheisler/criterion.rs">Criterion.rs</a>, a statistics-driven benchmarking library in Rust.</p></div></body></html>"#
  );
}
